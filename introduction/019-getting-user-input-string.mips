.data
  message:   .asciiz "Hello, what is your name: "
  userInput: .space 20 # .space" allows us reserve the next 20 bytes in data

.text
  main:
  	# Display hello message
		li $v0, 4
		la $a0, message
		syscall
		
 		# Getting user's input as text			 	NOTE: if you read the syscall docs you see that this requires two args (arg1, agr2): http://courses.missouristate.edu/kenvollmar/mars/help/syscallhelp.html
 																				# When we specify the length, we're reserving a chunk of memory space where the user's input will be stored.
  	li $v0, 8
  	la $a0, userInput 				#load into arg1: the user input
  	li $a1, 20  							#load into arg2: 20 (tell system max length of the text...recall that 1char=1byte)
		syscall
		
	
		
		# Display the user's input
		li $v0, 4
		la $a0, userInput 				# recall: 'userInput' is defined beforehand in RAM (data segment portion of RAM). After the user responds, the blank value is updated with the value the user entered.
		syscall
		
		
		
  	# Tell system this is the end of the main function.				If we don't we'll get trapped in a loop & error out
  	li $v0, 10
  	syscall
