.data
  # myArrayOfIntegers: .word  100:3      	# 100:3 reads as: initialize our array with 3 values which are all 100. NOTE: you'll need to update our terminating condition in while loop if we add/subtract elements.
  																			# Recall: a word=4bytes. Our last program had: ".space 12" so we we're  reserving space for 3 elements (4bytes * 3elements=12 bytes). We did it in one 1 statement here.
 	myArrayOfIntegers:	.word 1 2 3						 
	newLine: 					 .asciiz "\n"

.text
	# Index (AKA offset): $t0=0. Using this as our index.
	addi $t0, $zero, 0
	
 	# Clear $t0. I'll use it as counter for my while loop.
 	li $t0, 0
 	
 	whileLoop:
 		beq $t0, 12, exitProgram			 	# when our index is 12, that means we've reached the end of our array. Each element uses up 4 bytes of memory.
 		
 		lw $t6, myArrayOfIntegers($t0)	# Put item of array (which is in memory) into t6
 		
 		addi $t0, $t0, 4		# increment array index
 		
 		li $v0, 1						# Get ready to print current array number..
 		addi $a0, $t6, 0 		# or you can write the pseudo-instruction: move $a0, t6
 		syscall
 		
 		li $v0, 4						# print new line
 		la $a0, newLine
 		syscall
 		
 		j whileLoop
 
 	exitProgram: 
 		li $v0, 10
 		syscall
