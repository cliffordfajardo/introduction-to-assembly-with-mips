.data
  promptMessage:				.asciiz "Enter a number to find its factorial: "
  resultMessageIntro:		.asciiz "\nThe factorial of the number is: "
  userIntegerResponse:  .word 0 # initialize to 0
  factorialSum:    			.word 0

.text
	.globl main # this allows us to reference this label/procedure from other files
	main:
		# Print the enter prompt message
		li $v0, 4
		la $a0, promptMessage
		syscall
		
		
		# Read integer response from user
		li $v0, 5
		syscall
		
		
		
		# By convention, we store the return value of functions in $v0-1 so....store user's integer
		sw $v0, userIntegerResponse 			#	default value = 0
		
		
		# Call the factorial function
		lw $a0, userIntegerResponse			# place 0 in arg0 register to start
		jal findFactorial								# call factorial(..)
		sw $v0, factorialSum
		
		
		# Display the resultMessageIntro
		li $v0, 4
		la $a0, resultMessageIntro
		syscall


		# Print the integer result
		li $v0, 1
		lw $a0, factorialSum
		syscall



		# Tell OS End of program
		li $v0, 10
		syscall
		
	##############################################
	.globl findFactorial
	findFactorial:
		
		# Putting variables on the stack!
		subu $sp, $sp, 8	  # allocate two words on the stack: (1) return address (2)
		sw 	 $ra, ($sp)			# store the ($ra back to main initially) at $sp location 0 
		sw 	 $s0, 4($sp)		# store s0 															 at $sp location 4 (0 value initially) .. in the second recursion for factorial(2), this is acutally 2 we're saving on the stack
		
		
		# Base Case
		li $v0, 1 												# Recall that $v registers are used to save function return values by convention
											  							# By default make the return value 1 (may change later if factorial recieves anything greater than 1)
		
		beq $a0, 0, factorialDone					# if arg0 == 0, call factorial done
																			# else continue down
		
	
		# findFactorial(theNumber-1)
		move $s0, $a0										# move a0 into s0. s0 may have been updated by findFactorial by now.  This would be "2" if fact(2) was our initial input...the second recursion call this is 1
		sub  $a0, $a0, 1								# if we did fact(2) ....$a0 = 2-1
		jal findFactorial
		
		# magic happens her: this gets called when we're returning from our functions. This looks like: "return number * number-1" . We only ever run this code if the user input > 1 to facotiral
		mul $v0, $s0, $v0
		
		
		
		factorialDone:
			# Grab variables from stack...because our function is done.
			lw $ra, ($sp) 		# Grab return address from location 1 on stack.
			lw $s0, 4($sp)		# $s0 = 									 location 2 on stack
			
			addu $sp, $sp, 8 	# restore space from stack
			jr $ra 						#if user input was 0 this would jump fact to findFactorial original
		
	
